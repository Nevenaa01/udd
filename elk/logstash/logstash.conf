input {
  file {
    path => "/usr/share/logstash/ingest_data/application.log"
    sincedb_path => "/usr/share/logstash/data/sincedb_application"
  }
}


filter {
    grok {
        match => {
            "message" => 'Attacked Org: %{DATA:attacked_organization_name} where Security Org: %{DATA:security_organization_name} with Member of incident response team: %{DATA:full_name} and severity: %{DATA:incident_severity}, on location: %{NUMBER:lat},%{NUMBER:lon} in city:%{DATA:city}, id in database: %{NUMBER:database_id:int}, pdfContent: %{GREEDYDATA:pdf_content}'
        }
    }
    if "_grokparsefailure" in [tags] {
        drop { }
    }

    mutate{
        rename => { "message" => "text_field"}
        gsub => [
          "text_field", "\r", "",
          "[event][original]", "\r", ""
        ]
        add_field => { "location" => "%{lat},%{lon}" }
        remove_field => ["@timestamp", "@version", "host", "log", "event"]
    }
}

output{

    #data is sent to elasticsearch as output
    elasticsearch{
        hosts => ["http://elasticsearch:9200"]
        user => "ml_user"
        password => "${ES_PASSWORD}"
        index => "security_incident_index"
        pipeline => "text-embedding-pipeline-all-MiniLM-L6-v2"
    }
    stdout{
        codec => rubydebug
    }
}